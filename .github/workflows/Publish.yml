name: Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g. v1.2.3)'
        required: true
      ionoscloud-version:
        description: 'Python SDK client version to use '
        required: true
        default: 6.0.0b1
      test:
        description: 'Whether to run tests or not'
        required: true
        default: 'yes'
      ansible-repo:
        required: true
        description: 'Ansible repo to publish the Module to (galaxy or galaxy-dev)'
        default: 'galaxy-dev'


jobs:
  test:
    name: Testing the Ansible Module
    env:
        python-version: 3.8.0
        ANSIBLE_LIBRARY: /home/runner/work/module-ansible/module-ansible/plugins/modules
        IONOS_USERNAME: ${{ secrets.IONOS_VDC_USER }}
        IONOS_PASSWORD: ${{ secrets.IONOS_VDC_PASSWORD }}

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
        python-version: ${{ env.python-version }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Setup pip, virtualenv, ionoscloud
        run: |
         python3 -m pip install --upgrade pip
         python3 -m pip install ionoscloud
         python3 -m pip install ionoscloud-dbaas-postgres

      - name: Install Ansible
        run: |
           python3 -m pip install ansible

      - name: Debug pip packages
        run: |
         python3 -m pip list

      - name: Run DBaaS Postgres tests
        if: github.event.inputs.test == 'yes'
        run: |
          ansible-playbook /home/runner/work/module-ansible/module-ansible/tests/dbaas-postgres/all-tests.yml

      - name: Run Managed Kubernetes tests
        if: github.event.inputs.test == 'yes'
        run: |
          ansible-playbook /home/runner/work/module-ansible/module-ansible/tests/managed-kubernetes/all-tests.yml

      - name: Run Compute Engine tests
        if: github.event.inputs.test == 'yes'
        run: |
          ansible-playbook /home/runner/work/module-ansible/module-ansible/tests/compute-engine/all-tests.yml

      - name: Run Managed Backup tests
        if: github.event.inputs.test == 'yes'
        run: |
          ansible-playbook /home/runner/work/module-ansible/module-ansible/tests/managed-backup/all-tests.yml

      - name: Run NAT Gateway tests
        if: github.event.inputs.test == 'yes'
        run: |
          ansible-playbook /home/runner/work/module-ansible/module-ansible/tests/natgateway/all-tests.yml

      - name: Run Network Load Balancer tests
        if: github.event.inputs.test == 'yes'
        run: |
          ansible-playbook /home/runner/work/module-ansible/module-ansible/tests/networkloadbalancer/all-tests.yml

      - name: Run User Management tests
        if: github.event.inputs.test == 'yes'
        run: |
          ansible-playbook /home/runner/work/module-ansible/module-ansible/tests/user-management/all-tests.yml


  publish:
      name: Publishing the Module
      runs-on: ubuntu-latest
      needs: [test]
      steps:

        - name: Checkout
          uses: actions/checkout@v2
          with:
            ref: master

        - name: Get current version
          id: cversion
          run: echo "::set-output name=version::$(grep version galaxy.yml | awk -F':' '{ print $2 }')"

        - name: Build Ansible Collection
          run: |
            ansible-galaxy collection build
            ls

        - name: Deploy Ansible collection to Galaxy-Dev
          if: github.event.inputs.ansible-repo == 'galaxy-dev'
          run: | 
            ls
            ansible-galaxy collection publish ionoscloudsdk-ionoscloud-${{ github.event.inputs.version }}.tar.gz --server https://galaxy-dev.ansible.com/ --api-key ${{ secrets.ANSIBLE_GALAXYDEV_API_KEY }}
          
        - name: Deploy Ansible collection to Galaxy
          if: github.event.inputs.ansible-repo == 'galaxy'
          run: ansible-galaxy collection publish ionoscloudsdk-ionoscloud-${{ github.event.inputs.version }}.tar.gz --api-key ${{ secrets.ANSIBLE_GALAXY_API_KEY }}

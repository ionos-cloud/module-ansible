
- hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - ./vars.yml

  tasks:
    - name: Create datacenter
      ionoscloudsdk.ionoscloud.datacenter:
        name: "{{ datacenter }}"
        description: "{{ description }}"
        location: "{{ location }}"
        wait: true
      register: datacenter_response

    - name: Create Listener LAN
      ionoscloudsdk.ionoscloud.lan:
        datacenter: "{{ datacenter }}"
        name: "listener_lan"
        public: false
      register: listener_lan

    - name: Create Target LAN
      ionoscloudsdk.ionoscloud.lan:
        datacenter: "{{ datacenter }}"
        name: "target_lan"
        public: false
      register: target_lan

    - name: Create Network Load Balancer
      ionoscloudsdk.ionoscloud.network_load_balancer:
        datacenter: "{{ datacenter_response.datacenter.id }}"
        name: "{{ name }}"
        ips:
          - "10.12.118.224"
        listener_lan: "{{ listener_lan.lan.id }}"
        target_lan: "{{ target_lan.lan.id }}"
        wait: true
      register: nlb_response

    # - name: Print output to file
    #   ansible.builtin.copy:
    #     content: "{{nlb_response}}"
    #     dest: ../../docs/returned_object_examples/network_load_balancer.json

    - name: List Network Load Balancers
      ionoscloudsdk.ionoscloud.network_load_balancer_info:
        datacenter: "{{ datacenter_response.datacenter.id }}"
      register: nlb_list_response

    # - name: Print output to file
    #   ansible.builtin.copy:
    #     content: "{{nlb_list_response}}"
    #     dest: ../../docs/returned_object_examples/network_load_balancer_info.json

    - name: Debug - Show Network Load Balancer
      debug:
         msg: "{{ nlb_response }}"

    - name: Create Network Load Balancer Forwarding Rule
      ionoscloudsdk.ionoscloud.network_load_balancer_rule:
        name: "{{ name }}"
        algorithm: "ROUND_ROBIN"
        protocol: "TCP"
        listener_ip: "10.12.118.224"
        listener_port: "8081"
        targets:
          - ip: "22.231.2.2"
            port: "8080"
            weight: "123"
        health_check:
          client_timeout: 50
          connect_timeout: 5000
          target_timeout: 5000
          retries: 1
        datacenter: "{{ datacenter_response.datacenter.id }}"
        network_load_balancer: "{{ nlb_response.network_load_balancer.id }}"
        wait: true
      register: nlb_forwarding_rule_response

    # - name: Print output to file
    #   ansible.builtin.copy:
    #     content: "{{nlb_forwarding_rule_response}}"
    #     dest: ../../docs/returned_object_examples/network_load_balancer_rule.json

    - name: List Network Load Balancer Forwarding rules
      ionoscloudsdk.ionoscloud.network_load_balancer_rule_info:
        datacenter: "{{ datacenter_response.datacenter.id }}"
        network_load_balancer: "{{ nlb_response.network_load_balancer.id }}"
      register: nlb_forwardingrule_list_response

    # - name: Print output to file
    #   ansible.builtin.copy:
    #     content: "{{nlb_forwardingrule_list_response}}"
    #     dest: ../../docs/returned_object_examples/network_load_balancer_rule_info.json

    - name: Debug - Show Network Load Balancer Forwarding Rule
      debug:
         msg: "{{ nlb_forwarding_rule_response }}"

    - name: Update Network Load Balancer Forwarding Rule
      ionoscloudsdk.ionoscloud.network_load_balancer_rule:
        datacenter: "{{ datacenter_response.datacenter.id }}"
        network_load_balancer: "{{ nlb_response.network_load_balancer.id }}"
        forwarding_rule: "{{ nlb_forwarding_rule_response.forwarding_rule.id }}"
        name: "{{ name }} - UPDATED"
        algorithm: "ROUND_ROBIN"
        protocol: "TCP"
        wait: true
        state: update
      register: nlb_forwarding_rule_update_response

    - name: Debug - Show Updated Network Load Balancer Forwarding Rule
      debug:
         msg: "{{ nlb_forwarding_rule_update_response }}"

    - name: Delete Network Load Balancer Forwarding Rule
      ionoscloudsdk.ionoscloud.network_load_balancer_rule:
        datacenter: "{{ datacenter_response.datacenter.id }}"
        network_load_balancer: "{{ nlb_response.network_load_balancer.id }}"
        forwarding_rule: "{{ nlb_forwarding_rule_response.forwarding_rule.id }}"
        state: absent

    - name: Delete Network Load Balancer Forwarding Rule
      ionoscloudsdk.ionoscloud.network_load_balancer_rule:
        datacenter: "{{ datacenter_response.datacenter.id }}"
        network_load_balancer: "{{ nlb_response.network_load_balancer.id }}"
        forwarding_rule: "invalid-id"
        state: absent

    - name: Remove Network Load Balancer
      ionoscloudsdk.ionoscloud.network_load_balancer:
       network_load_balancer: "{{ nlb_response.network_load_balancer.id }}"
       datacenter: "{{ datacenter_response.datacenter.id }}"
       wait: true
       wait_timeout: 2000
       state: absent

    - name: Remove Listener LAN
      ionoscloudsdk.ionoscloud.lan:
        datacenter: "{{ datacenter }}"
        lan: "listener_lan"
        state: absent

    - name: Remove Target LAN
      ionoscloudsdk.ionoscloud.lan:
        datacenter: "{{ datacenter }}"
        lan: "target_lan"
        state: absent

    - name: Remove datacenter
      ionoscloudsdk.ionoscloud.datacenter:
        datacenter: "{{ datacenter }}"
        wait: true
        state: absent
